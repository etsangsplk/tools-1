#!/usr/bin/env bash

# golang programming environment installer
# Copyright (C) 2014-2016  <geosoft1@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

GOPEI_LONG_NAME="Golang Programming Environment Installer"
GOPEI_CODE_NAME="The Convergence"
GOPEI_AUTHOR="geosoft1@gmail.com"
GOPEI_COPYRIGHT="Copyright (C) 2014-2016  $GOPEI_AUTHOR"
GOPEI_MAJOR_VERSION=1
GOPEI_MINOR_VERSION=7
GOPEI_PATCH_VERSION=1
GOPEI_STAGE="release"
GOPEI_VERSION=$GOPEI_MAJOR_VERSION.$GOPEI_MINOR_VERSION.$GOPEI_PATCH_VERSION
GOPEI_ROOT=`dirname $0`
GOPEI_NAME=`basename $0`
GOPEI_DATE="05 July 2016"
GOPEI_LAST="16 Aug 2016"

GOROOT=$HOME/go
GOPATH=$HOME
PATH=$PATH:$GOROOT/bin

IDE_VERSION=30
IDEROOT=$HOME/liteide

set -e

#-------------------------------------------------------------------------------
#get host computer arch (e.g. i686|x86_64|armv6l)
case $(uname -m) in
   i686 )
      MACHINE_TYPE=386;;
   x86_64|amd64 )
      MACHINE_TYPE=amd64;;
   armv6l|armv7l )
      IS_ARM=1
      MACHINE_TYPE=armv6l;;
   * )echo "Unknown architecture" && exit;;
esac

#get host computer LONG_BIT (e.g 32|64)
MACHINE_BITS=$(getconf LONG_BIT)

#get kernel name (e.g. linux|darwin|freebsd)
KERNEL_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')

#set platform name (e.g. linux|macosx|freebsd)
if [ $KERNEL_NAME == darwin ]; then
   PLATFORM_NAME=macosx
else
   PLATFORM_NAME=$KERNEL_NAME	
fi

#tricky build IS_$(PLATFORM_NAME) flag
export IS_$(echo $PLATFORM_NAME | tr '[:lower:]' '[:upper:]')=1

case $PLATFORM_NAME in
linux )
   #set profile file (e.g. .bash_profile|.bashrc|.profile)
   PROFILE_FILE=$HOME/.bashrc
   #build ide name based on a fixed stable version
   IDE_NAME=liteidex$IDE_VERSION.$PLATFORM_NAME$MACHINE_BITS-qt4.tar.bz2
   IDE_RESOURCES=$IDEROOT/share/liteide
   #get localized user directories
   test -f ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs && source ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs;;
macosx )
   PROFILE_FILE=$HOME/.bash_profile
   IDE_NAME=liteidex$IDE_VERSION.$PLATFORM_NAME-qt4.zip
   IDE_RESOURCES=$IDEROOT/LiteIDE.app/Contents/Resources/
   LAUNCHER=$(defaults read com.apple.dock | grep _CFURLString\"| awk '/LiteIDE/ {print NR-1}');;
freebsd )
   PROFILE_FILE=$HOME/.bashrc
   #the image from <freebsd.org> seems to be a server image :-/
   IS_SERVER=1;;
esac

#-------------------------------------------------------------------------------
help()  {
   echo $GOPEI_LONG_NAME
   echo "Usage: $GOPEI_NAME [options]"
   echo "Options:"
   echo "-c        enable classroom mode (Linux only)"
   echo "-g        enable git suppport"
   echo "-h        show this help message and exit"
   echo "-q        install system only, no qt libs (Linux only)"
   echo "-s        server mode, install golang only"
   echo "-u        uninstall"
   echo "-U        uninstall include .gitconfig file and .ssh folder"
   echo "-v        version"
   exit
}

while getopts ":cghqsuUv" OPTION; do
case $OPTION in
   c )CLASSROOM_MODE=1;;
   g )GITSERVER=github.com;;
   h )help;;
   q )NO_QTLIBS=1;;
   s )IS_SERVER=1;;
   u|U )
      #common to all operating systems
      rm -rf $GOROOT
      rm -rf $IDEROOT
      #rm -rf $HOME/.dlv/
      rm -rf $HOME/.config/liteide/
      #Ubuntu specific
      rm -rf $HOME/.config/gocode/
      rm -rf $HOME/.local/share/applications/liteide.desktop
      #Linux specific
      rm -f $XDG_DESKTOP_DIR/liteide.desktop
      #rm -rf $HOME/.fonts/MONACO.TTF
      if [ $IS_MACOSX ] && [ $LAUNCHER ]; then
         /usr/libexec/PlistBuddy -c "Delete persistent-apps:$LAUNCHER" ~/Library/Preferences/com.apple.dock.plist
         killall Dock
      fi
      if [ $OPTION == U ]; then
         rm -rf $HOME/.ssh/
         rm -f  $HOME/.gitconfig
         #test "$(ls -A "$HOME/.local/share/data/liteide/goplay" 2>/dev/null)" || rm -rf $HOME/.local/share/data/liteide
         #if [ $IS_MACOSX ]; then
         #   test "$(ls -A "$HOME/Library/Application Support/LiteIDE/liteide/goplay" 2>/dev/null)" || rm -rf "$HOME/Library/Application Support/LiteIDE"
         #fi
      fi
      #restore original profile file
      [ -e $PROFILE_FILE ] && sed -i.bk '/. ~\/.go_profile/d' $PROFILE_FILE
      rm -f $HOME/.go_profile
      rm -f $PROFILE_FILE.bk
      echo "Uninstalled." && exit;;
   v )echo "$GOPEI_VERSION" && exit;;
   * )echo "Unimplemented option: -$OPTARG" && help;;
   esac
done

clear && echo -e "$GOPEI_LONG_NAME\n$GOPEI_CODE_NAME\n$GOPEI_COPYRIGHT"

#-------------------------------------------------------------------------------
#get last version of go compiler (e.g. go1.6.2.)
GOLANG_ORG=`curl -fsSLk --connect-timeout 3 golang.org || exit`
COMPILER_VERSION=`echo $GOLANG_ORG | 
awk '{ 
   if (match($0,/go([0-9]+.)+/)) 
      print substr($0,RSTART,RLENGTH) 
}'`

#build compiler name (e.g. go1.5.1.linux-386.tar.gz|go1.6.2.darvin-amd64.tar.gz)
COMPILER_NAME=$COMPILER_VERSION$KERNEL_NAME-$MACHINE_TYPE.tar.gz

echo "Installing $COMPILER_NAME..."
curl -fsSLkOz $COMPILER_NAME storage.googleapis.com/golang/$COMPILER_NAME || exit
tar -x -C $HOME -f $COMPILER_NAME

echo "Create GOPATH"
echo 'GOROOT=${HOME}/go
GOPATH=${HOME}
PATH=$PATH:/${GOROOT}/bin:${GOPATH}/bin
export PATH GOPATH GOROOT' > $HOME/.go_profile
grep -sq '. ~/.go_profile' $PROFILE_FILE || echo '. ~/.go_profile' >> $PROFILE_FILE

echo "Create helloworld program"
mkdir -p $GOPATH/src/helloworld && cp -r $GOROOT/test/helloworld.go $GOPATH/src/helloworld

if [ $IS_SERVER ] || [ $IS_ARM ]; then
  echo "Done." && exit
fi

#-------------------------------------------------------------------------------
echo "Installing $IDE_NAME..."
curl -fsSLkOz $IDE_NAME sourceforge.net/projects/liteide/files/X$IDE_VERSION/$IDE_NAME || exit

case $PLATFORM_NAME in
linux )
   tar -x -C $HOME -f $IDE_NAME
   #small ajustment on some Linux machines
   [ $NO_QTLIBS ] && rm $IDEROOT/lib/liteide/libQt*.*
   echo "Get Monaco font..."
   curl -o $HOME/.fonts/MONACO.TTF --create-dirs -fsSLOk jorrel.googlepages.com/Monaco_Linux.ttf || exit;;
macosx )
   mkdir -p $IDEROOT && unzip -q -o $IDE_NAME -d $IDEROOT;;
esac

#-------------------------------------------------------------------------------
echo "Create liteide.ini.mini"
mkdir -p $HOME/.config/liteide && echo '[liteenv]
currentenvid='$KERNEL_NAME$MACHINE_BITS'

[liteide]
gopath='$GOPATH'

[liteapp]
ShowEditToolbar=false
FolderShowHidenFiles=true
AutoLoadLastSession=false
SplashVisible=false
geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x1\0\0\0\0\0\x37\0\0\0\xe\0\0\x4*\0\0\x3\t\0\0\0\x41\0\0\0\x34\0\0\x4 \0\0\x2\xff\0\0\0\0\0\0)
state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x2\0\0\0\0\0\0\x1\x5\0\0\x2q\xfc\x2\0\0\0\x5\xfb\0\0\0\"\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x66\0o\0l\0\x64\0\x65\0r\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0 \0\xff\xff\xff\xfb\0\0\0&\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x63\0l\0\x61\0s\0s\0v\0i\0\x65\0w\0\0\0\0\0\xff\xff\xff\xff\0\0\0 \0\xff\xff\xff\xfb\0\0\0\"\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0o\0u\0t\0l\0i\0n\0\x65\0\0\0\0\0\xff\xff\xff\xff\0\0\0 \0\xff\xff\xff\xfb\0\0\0.\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0g\0o\0p\0\x61\0\x63\0k\0\x62\0r\0o\0w\0s\0\x65\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0 \0\xff\xff\xff\xfb\0\0\0(\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x66\0i\0l\0\x65\0s\0y\0s\0t\0\x65\0m\x1\0\0\0\x39\0\0\x2q\0\0\0\x8e\0\xff\xff\xff\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x1\0\0\0\x1\xfb\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x38\0\0\0\0\0\xff\xff\xff\xff\0\0\0U\0\xff\xff\xff\0\0\x2\xb8\0\0\x2q\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\b\xfc\0\0\0\x2\0\0\0\0\0\0\0\x1\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0t\0o\0o\0l\0_\0\x31\x3\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x2\0\0\0\x3\0\0\0\x16\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0s\0t\0\x64\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x16\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0\x65\0n\0v\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1a\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0\x62\0u\0i\0l\0\x64\x1\0\0\0\xd2\xff\xff\xff\xff\0\0\0\0\0\0\0\0)

[golangdoc]
goroot='$GOROOT'

[FileBrowser]
root='$HOME'/src
synceditor=false

[%General]
Language=en_US
WelcomePageVisible=false

[editor]
family=Monaco
fontsize=12

[output]
family=Monaco
fontsize=12' > $HOME/.config/liteide/liteide.ini

#-------------------------------------------------------------------------------
echo "Add git support..."
if [ $GITSERVER ]; then
   #create git configuration if not exist, otherwise use existent (~/.gitconfig)
   if [ -f $HOME/.gitconfig ]; then
      GITUSER=`awk 'NR==2 {print $3}' $HOME/.gitconfig`
      GITEMAIL=`awk 'NR==3 {print $3}' $HOME/.gitconfig`
   else
      echo "Setup git"
      echo -n "Git user ";read GITUSER
      echo -n "Git email [ENTER for $GITUSER@gmail.com] ";read GITEMAIL
      #try to guess git email
      if [ -z "$GITEMAIL" ]; then GITEMAIL="$GITUSER@gmail.com"; fi
      git config --global user.name "$GITUSER"
      git config --global user.email "$GITEMAIL"
   fi
   #generate ssh keys if not exist, otherwise use existent (https://help.github.com/articles/generating-ssh-keys/)
   KEYTYPE="rsa"
   if [ ! -f $HOME/.ssh/id_$KEYTYPE ]; then
      ssh-keygen -qt $KEYTYPE -C "$GITEMAIL" -f $HOME/.ssh/id_$KEYTYPE
      #add a new deploy key on github with api (https://developer.github.com/v3/)
      echo -n "Password:"; read -s GITPASSWORD
      echo 
      KEY=`cat $HOME/.ssh/id_$KEYTYPE.pub`
      #Key management:
      #curl -s -X GET -u $GITUSER:$GITPASSWORD https://api.github.com/user/keys
      #curl -s -X DELETE -u $GITUSER:$GITPASSWORD https://api.github.com/user/keys/13146480
      #curl -s -X POST -u $GITUSER:$GITPASSWORD https://api.github.com/user/keys -d '{"key":"'"${KEY}"'"}'
      curl -s -X POST -u $GITUSER:$GITPASSWORD https://api.$GITSERVER/user/keys -d '{"key":"'"${KEY}"'"}'| awk '/message/ { gsub(/^[\t ]+|[\",]/,"");print }'
   fi
   #bug workaround https://help.github.com/articles/error-permission-denied-publickey
   eval `ssh-agent -s` > /dev/null
   echo "Checking the keys..."
   #workaround: if ssh result is false (Permission denied (publickey).) set -e will stop the script
   #prevent this by changing result code to true and let the script to continue
   ssh -o StrictHostKeyChecking=no -o LogLevel=error -T git@$GITSERVER || true
   #create github.com in $GOPATH
   mkdir -p $GOPATH/src/$GITSERVER/$GITUSER
fi

#-------------------------------------------------------------------------------
echo "Create some useful resources"
IDE_TEMPLATE=$IDE_RESOURCES/liteapp/template

#create gosimple template
sed -i.bk '1i\
gosimple
' $IDE_TEMPLATE/project.sub

mkdir -p $IDE_TEMPLATE/gosimple

echo "// \$ROOT\$ project
package main

func main() {
}" > $IDE_TEMPLATE/gosimple/main.go

echo "[SETUP]
NAME = \"Go1 Simple Project\"
AUTHOR = geosoft1
INFO = new go1 simple project
TYPE = gopath
FILES = main.go
OPEN = main.go
SCHEME=folder" > $IDE_TEMPLATE/gosimple/setup.inf

#create GPL template
sed -i.bk '2i\
gogpl
' $IDE_TEMPLATE/project.sub

mkdir -p $IDE_TEMPLATE/gogpl

year=`date +"%Y"`
author=$GITUSER
email=$GITEMAIL
[ $author ] || author="<name of the author>"
[ $email ] || email="<email of the author>"

echo "// \$ROOT\$ project
// Copyright (C) $year  $author  $email
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package main

func main() {
}" > $IDE_TEMPLATE/gogpl/main.go

echo "[SETUP]
NAME = \"Go1 GPL Project\"
FILES = main.go LICENSE CONTRIBUTORS README.md
AUTHOR = geosoft1
INFO = new go1 gpl project
TYPE = gopath
OPEN = main.go
SCHEME=folder" > $IDE_TEMPLATE/gogpl/setup.inf

echo $GITEMAIL > $IDE_TEMPLATE/gogpl/CONTRIBUTORS
echo "\$ROOT\$
====" > $IDE_TEMPLATE/gogpl/README.md

#set GPL license acording to FSF
cp $GOPEI_ROOT/LICENSE $IDE_TEMPLATE/gogpl/LICENSE

#add common git comands to liteide
echo "git add *
git commit -m \"-\" -a
git push
git pull
tools/github 
tools/install
tools/cloud
go list -f '{{context}}'
go list -f '{{.GoFiles}}'
go list -f '{{.IgnoredGoFiles}}'" > $IDE_RESOURCES/litebuild/command/go.api

#add scripts to environment
[ -e $GOPEI_ROOT/tools ] && cp -R $GOPEI_ROOT/tools $GOROOT/bin

#-------------------------------------------------------------------------------
echo "Create smart launcher"
case $PLATFORM_NAME in
linux )
   if [ $CLASSROOM_MODE ]; then
      cp $HOME/.config/liteide/liteide.ini $HOME/.config/liteide/liteide.ini.mini
      #add restore command
      RESTORE_INI_MINI_COMMAND="cp $HOME/.config/liteide/liteide.ini.mini $HOME/.config/liteide/liteide.ini;"
   fi
   #create generic .desktop file on desktop
   echo -e "\
   \r[Desktop Entry]
   \rVersion=1.0
   \rName=LiteIDE
   \rComment=LiteIDE is a simple, open source, cross-platform Go IDE. 
   \rExec=sh -c 'eval \`ssh-agent -s\`;$RESTORE_INI_MINI_COMMAND$HOME/liteide/bin/liteide'
   \rIcon=$GOROOT/doc/gopher/gophercolor.png
   \rType=Application" > ${XDG_DESKTOP_DIR}/liteide.desktop

   case $DESKTOP_SESSION in
   ubuntu* )
      #extend .desktop file with some nice options
      if [ $GITSERVER ]; then
         GITACTION="$GITSERVER;"
         GITDESKTOPACTION="[Desktop Action $GITSERVER]
         \rName=$GITSERVER/$GITUSER
         \rExec=xdg-open http://$GITSERVER/$GITUSER"
      fi
      echo -e "\
      \rActions=golang;http;gopath;$GITACTION
      \r\n[Desktop Action golang]
      \rName=golang.org
      \rExec=xdg-open http://golang.org/pkg
      \r\n[Desktop Action http]
      \rName=HTTP server (localhost:8080)
      \rExec=xdg-open http://localhost:8080
      \r\n[Desktop Action gopath]
      \rName=GOPATH
      \rExec=xdg-open ${GOPATH}/src
      \r\n$GITDESKTOPACTION" >> ${XDG_DESKTOP_DIR}/liteide.desktop
      #create directory for liteide.desktop
      mkdir -p $HOME/.local/share/applications/
      #add .desktop file to dash and integrate with unity
      mv ${XDG_DESKTOP_DIR}/liteide.desktop $HOME/.local/share/applications
      #get the current launcher favorites list
      LAUNCHER=$(gsettings get com.canonical.Unity.Launcher favorites)
      #skip update if liteide launcher already exists
      if ! [[ $LAUNCHER =~ "liteide.desktop" ]]; then
         LAUNCHER=${LAUNCHER/]/, \'liteide.desktop\']} && sleep 1
         #update the launcher favorites list,in unity changes are shwown immediately.
         gsettings set com.canonical.Unity.Launcher favorites "$LAUNCHER"
      fi;;
   #generic desktop environment have only a desktop shortcut
   * )chmod +x ${XDG_DESKTOP_DIR}/liteide.desktop;;
   esac;;

macosx )
   if [ -z $LAUNCHER ]; then
      #OS X Dock management
      #defaults read com.apple.dock persistent-apps
      #defaults delete com.apple.dock
      defaults write com.apple.dock persistent-apps -array-add '
<dict>
<key>tile-data</key>
   <dict>
   <key>file-data</key>
      <dict>
      <key>_CFURLString</key><string>'$IDEROOT'/LiteIDE.app</string>
      <key>_CFURLStringType</key><integer>0</integer>
      </dict>
   </dict>
</dict>'
      killall Dock
   fi;;
esac

#-------------------------------------------------------------------------------
echo "Done."
