#!/usr/bin/env bash

# cloud tool
# Copyright (C) 2014-2018  geosoft1@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Project path structure
# ---
# /home/username/src/github.com/githubusername/projectname/*.go
# |HOME         |BASEPATH                     |BASENAME   |.servers
# |REMOTE_HOME  |                             |PROJECT_NAME
#                                             |EXECUTABLE_NAME
# .servers,.backup files structure
# ---
# REMOTE_ADDR REMOTE_PORT REMOTE_USER
# ---

set -T

LONG_NAME="Cloud tool"
CODE_NAME="Quantum Teleporter"
AUTHOR="geosoft1@gmail.com"
COPYRIGHT="Copyright (C) 2014-2018  $AUTHOR"
VERSION=3.3.2
STAGE="release"

ROOT=`dirname $0`
NAME=`basename $0`

GOROOT=$HOME/go
GOBIN=$GOROOT/bin
GOPATH=$HOME

BASENAME=`basename $PWD`
PROJECT_NAME=$BASENAME
EXECUTABLE_NAME=$PROJECT_NAME
BASEPATH=`echo $PWD | sed -e "s,$HOME\/,," | sed -e "s,\/$BASENAME$,,"`

CONFIG_FILE=$PWD/.servers
TMP_FOLDER=/tmp/.ssh

SSH_OPTIONS=(-o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -q)

sshcmd() {
   ssh -p $REMOTE_PORT "${SSH_OPTIONS[@]}" $REMOTE_USER@$REMOTE_ADDR $1
   #echo $?
   #check error code of remote ssh which tipically must be 0
   #if error code is 1 or more print original command error message
   if [ $? -eq 255 ]; then
      #simulate scp lost connection when command fail :P
      echo "lost connection" && exit
   fi
}

scpcmd() {
   #scp already get lost connection when command fail :P
   scp -P $REMOTE_PORT -r "${SSH_OPTIONS[@]}" $1
}

usage()  {
   echo "Usage: $NAME [options]"
   echo "Options:"
   echo "init              -- push ssh key to remote server(s)"
   echo "push              -- push curent source+binary tree"
   #echo "pull             -- pull remote source+binary tree"
   echo "run [filename]    -- run project or file remote,view result locally"
   echo "detach [filename] -- run and detach project or file remote"
   echo "teleport          -- push and run project remote,view result locally"
   echo "kill              -- stop the project remote"
   #echo "build            -- build project remote from remote source"
   echo "deploy            -- deploy project on remote server(s)"
   echo "delete            -- delete project from remote server(s)"
   echo "remove            -- uninstall project from remote server(s)"
   echo "backup            backup GOPATH folder on remote server(s)"
   echo "                  init                initialize connection to server(s)"
   echo "                  list                list all available backups"
   echo "                  remove [filemask]   eg. backup-user@machine-* or backup-*"
   echo "                  mirror              do mirror copy"
   echo "terminal          free remote ssh commands"
   echo "version           version"
   exit
}

getRemoteEnv() {
   REMOTE_HOME=`sshcmd "printenv HOME"`
   PROJECT_PATH=$REMOTE_HOME/$BASEPATH/$PROJECT_NAME
}

pushKeys() {
   echo "-- push ssh key to $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   if [ ! -f $HOME/.ssh/id_rsa.pub ]; then
     echo "no public key found" && exit
   fi
   #scp create destination folder only if it copies folders
   #so we prepare here a temporary folder for key transfer
   mkdir -m 700 -p $TMP_FOLDER
   #copy only the key in temporary folder
   cp $HOME/.ssh/id_rsa.pub $TMP_FOLDER/authorized_keys
   #safe deploy the public key to remote server
   if [ -z $LITEIDE_TERM ]; then
      scpcmd "$TMP_FOLDER $REMOTE_USER@$REMOTE_ADDR:"
   else
      echo -n "$REMOTE_USER@$REMOTE_ADDR's password: "
      #because of askpass can't use scpcmd function here
      $GOBIN/tools/ssh_askpass scp -P $REMOTE_PORT -r "${SSH_OPTIONS[@]}" $TMP_FOLDER $REMOTE_USER@$REMOTE_ADDR:
   fi
   #clean the mess
   rm -rf $TMP_FOLDER
}

readConfigFile() {
   eval $(cat $CONFIG_FILE | awk '{print "REMOTE_ADDR=\""$1"\";REMOTE_PORT=\""$2"\";REMOTE_USER=\""$3"\""}')
}

createConfigFile() {
   echo -n "Remote server ";read REMOTE_ADDR
   #try to guess remote ssh port
   echo -n "Remote port [ENTER for 22] ";read REMOTE_PORT
   if [ -z "$REMOTE_PORT" ]; then REMOTE_PORT="22"; fi
   #try to guess remote user
   echo -n "Remote user [ENTER for $USER] ";read REMOTE_USER
   [ -z $REMOTE_USER ] && REMOTE_USER=$USER
   echo -e "$REMOTE_ADDR $REMOTE_PORT $REMOTE_USER" > $CONFIG_FILE
   readConfigFile
   pushKeys
}

checkConfigFile() {
   if [ ! -f $CONFIG_FILE ]; then
      createConfigFile
   else
      readConfigFile
   fi
}

push() {
   checkConfigFile
   echo "-- push $PWD source+binary tree on $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   getRemoteEnv
   #force copy read-only files like some .git content
   sshcmd "mkdir -p $BASEPATH"
   sshcmd "chmod -R +w $BASEPATH"
   scpcmd "$PWD $REMOTE_USER@$REMOTE_ADDR:$BASEPATH"
}

run() {
   checkConfigFile
   echo "-- run project on $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   [ $1 ] && EXECUTABLE_NAME=$1
   getRemoteEnv
   sshcmd "$PROJECT_PATH/$EXECUTABLE_NAME"
}

detach() {
   checkConfigFile
   echo "-- run and detach project on $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   [ $1 ] && EXECUTABLE_NAME=$1
   getRemoteEnv
   sshcmd "bash -c 'nohup $PROJECT_PATH/$EXECUTABLE_NAME > /dev/null 2>&1 &'"
}

teleport() {
   checkConfigFile
   echo "-- teleporting project on $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   push && run
}

_kill() {
   checkConfigFile
   echo "-- kill project on $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   [ $1 ] && EXECUTABLE_NAME=$1
   #getRemoteEnv
   sshcmd "killall $EXECUTABLE_NAME"
}

deploy() {
   checkConfigFile
   echo "-- deploy project on $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   getRemoteEnv
   sshcmd "(crontab -l 2>/dev/null; echo '@reboot $PROJECT_PATH/$EXECUTABLE_NAME') | crontab -"
}

delete() {
   checkConfigFile
   echo "-- delete project from $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   getRemoteEnv
   sshcmd "rm -rf $PROJECT_PATH"
}

remove() {
   checkConfigFile
   echo "-- remove project from $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
   getRemoteEnv
   sshcmd "rm -rf $PROJECT_PATH"
   sshcmd "(crontab -l 2>/dev/null; echo '@reboot $PROJECT_PATH/$EXECUTABLE_NAME') | grep -v $EXECUTABLE_NAME | crontab -"
}

terminal() {
   checkConfigFile
   sshcmd
}

backup() {
   PWD=$GOPATH/src
   CONFIG_FILE=$PWD/.backup
   checkConfigFile
   case $1 in
      init  ) createConfigFile;;
      list  ) echo "-- list backups from $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
              sshcmd "ls | grep backup";;
      remove) if [ -z $2 ]; then
                 echo "nothing to remove" && exit
              fi
              echo -n "-- remove $2 from $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT? [y/n] " && read Y
              if [ "$Y" == "y" ]; then
              sshcmd "rm -rf $2"
              else
                 echo "Aborted!" && exit
              fi;;
      mirror) BASEPATH="backup"
              echo "-- remove $BASEPATH source+binary tree from $REMOTE_USER@$REMOTE_ADDR:$REMOTE_PORT"
              sshcmd "rm -rf $BASEPATH"
              push;;
      *     ) BASEPATH="backup-$USER@$HOSTNAME-$(date +%d%m%Y%M%S)" && push;;
   esac
}

case $1 in
   init    ) createConfigFile;;
   push    ) push;;
   run     ) run $2;;
   detach  ) detach $2;;
   teleport) teleport;;
   kill    ) _kill $2;;
   deploy  ) _kill || true
             remove
             push && deploy
             run;;
   delete  ) _kill || true
             delete;;
   remove  ) _kill || true
             remove;;
   terminal) terminal;;
   backup  ) backup $2 $3;;
   version ) echo $VERSION && exit;;
   *       ) usage;;
esac

echo "Done."
